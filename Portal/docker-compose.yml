version: '3.4'

volumes:
  postgres_data:
      driver: local
  pgadmin-data:
  # minio-storage:
  # rabbitmq-storage:
  # opensearch-data:
  prometheus_data: {}
  grafana_data: {}

services:
  portal:
    image: ${DOCKER_REGISTRY-}portal
    container_name: portal
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
       # - ASPNETCORE_URLS=https://+:443;http://+:80
      #   - ASPNETCORE_HTTPS_PORT=5009
    ports:
      - "3002:80"
      - "47002:443"
    build:
      context: .
      dockerfile: Portal/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16.1
    volumes:
    - postgres_data:/var/lib/postgresql/data
    environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: keycloak
    healthcheck:
        test: ["CMD-SHELL", "pg_isready"]
        interval: 5s
        timeout: 2s
        retries: 5

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
    - 9090:9090
    volumes:
    #  - ./prometheus/:/etc/prometheus/
      - './portal/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
      - prometheus_data:/prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    #volumes:
    #- ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default

  keycloak:
      image: quay.io/keycloak/keycloak:20.0.5
      command:
      - start --auto-build --db postgres --hostname-strict-https false --hostname-strict false --proxy edge --http-enabled true --import-realm
      environment:
        KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
        KC_DB_USERNAME: postgres
        KC_DB_PASSWORD: postgres
        KC_DB_SCHEMA: public
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_HEALTH_ENABLED: true
      volumes:
        - type: bind
          source: ./portal/Keycloak/realm-export.json
          target: /opt/keycloak/data/import/realm-export.json
          read_only: true
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
        interval: 5s
        timeout: 2s
        retries: 15
      ports:
        - 8080:8080
      depends_on:
        - postgres

  appgateway:
      image: ${DOCKER_REGISTRY-}appgateway
      build:
        context: .
        dockerfile: ../AppGateway/Dockerfile
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
       # - ASPNETCORE_URLS=https://+:443;http://+:80
      #   - ASPNETCORE_HTTPS_PORT=5009
      ports:
        - "3001:80"
        - "47001:443"
      depends_on:
        keycloak:
          condition: service_healthy
